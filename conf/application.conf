# This is the main configuration file for the application.
# ~~~~~

play.modules.enabled += services.GitHubModule
play.http.filters = utils.Filters
play.http.requestHandler = play.api.http.DefaultHttpRequestHandler

github.committerTeams = ["Owners", "Developers"]
github.organisation = "playframework"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="changeme"

# The application languages
# ~~~~~
application.langs="en,ja,tr,fr,bg"
# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)


# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost:3306/test"
db.default.user="root"
db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

documentation.home=testdocs

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# The loader dispatcher is used by the actor that loads files out of git.  All blocking git IO is done on these
# threads.
loader-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 4
    core-pool-size-max = 4
  }
}

# The polling dispatcher is responsible for two things, one is polling GitHub for documentation changes, the other
polling-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 1
    core-pool-size-max = 1
  }
}

activator.latest-url="https://typesafe.com/activator/latest"

documentation {
  path = "."
  main {
    lang = "en"
    repo = "generated"
    versionFile = ".version"
    versionPattern = "(.+)"
    gitHubSource = "https://github.com/playframework/playframework/blob/%s/documentation/%s"
  }
  translations = [
    {
      lang = "ja"
      repo = "ja"
      gitHubSource = "https://github.com/playframework-ja/translation-project/blob/%s/%s"
    },
    {
      lang = "tr"
      repo = "tr"
      versionFile = "project/plugins.sbt"
      versionPattern = "\"play-docs-sbt-plugin\" % \"([^\"]+)"
      gitHubSource = "https://github.com/PlayFrameworkTR/translation-project/blob/%s/%s"
    },
    {
      lang = "fr"
      repo = "fr"
      versionFile = "project/plugins.sbt"
      versionPattern = "\"play-docs-sbt-plugin\" % \"([^\"]+)"
      gitHubSource = "https://github.com/cheleb/playframework-fr/blob/%s/%s"
    },
    {
      lang = "bg"
      repo = "bg"
      versionFile = "project/plugins.sbt"
      versionPattern = "\"play-docs-sbt-plugin\" % \"([^\"]+)"
      gitHubSource = "https://github.com/antonsarov/translation-project/blob/%s/%s"
    }
  ]
}

# Better to have a dead JVM that we can run diagnostics on than no JVM at all
akka.jvm-exit-on-fatal-error = false
play.akka.jvm-exit-on-fatal-error = false
